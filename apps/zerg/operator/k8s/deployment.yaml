apiVersion: apps/v1
kind: Deployment
metadata:
  name: zerg-operator
  namespace: zerg-system
  labels:
    app.kubernetes.io/name: zerg-operator
    app.kubernetes.io/component: controller
spec:
  replicas: 1
  selector:
    matchLabels:
      app.kubernetes.io/name: zerg-operator
  template:
    metadata:
      labels:
        app.kubernetes.io/name: zerg-operator
    spec:
      serviceAccountName: zerg-operator
      containers:
      - name: controller
        image: zerg-operator:latest
        imagePullPolicy: IfNotPresent
        command:
        - /zerg-operator
        args:
        - --log-level=info
        - --namespace=zerg-system
        - --config-path=/etc/zerg/config.yaml
        env:
        - name: RUST_LOG
          value: "info"
        - name: NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        ports:
        - containerPort: 8080
          name: metrics
          protocol: TCP
        livenessProbe:
          httpGet:
            path: /health
            port: 8080
          initialDelaySeconds: 30
          periodSeconds: 30
        readinessProbe:
          httpGet:
            path: /ready
            port: 8080
          initialDelaySeconds: 5
          periodSeconds: 10
        resources:
          requests:
            cpu: 100m
            memory: 128Mi
          limits:
            cpu: 500m
            memory: 512Mi
        volumeMounts:
        - name: config
          mountPath: /etc/zerg
          readOnly: true
        securityContext:
          allowPrivilegeEscalation: false
          capabilities:
            drop:
            - ALL
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          seccompProfile:
            type: RuntimeDefault
      volumes:
      - name: config
        configMap:
          name: zerg-operator-config
      securityContext:
        runAsNonRoot: true
        seccompProfile:
          type: RuntimeDefault
      terminationGracePeriodSeconds: 30
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: zerg-operator
  namespace: zerg-system
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: zerg-operator
rules:
- apiGroups: [""]
  resources: ["namespaces", "secrets", "configmaps", "services", "pods"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["apps"]
  resources: ["deployments", "replicasets", "daemonsets", "statefulsets"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["zerg.io"]
  resources: ["dependencymanagers"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["zerg.io"]
  resources: ["dependencymanagers/status"]
  verbs: ["get", "update", "patch"]
- apiGroups: ["apiextensions.k8s.io"]
  resources: ["customresourcedefinitions"]
  verbs: ["get", "list", "watch"]
- apiGroups: ["source.toolkit.fluxcd.io"]
  resources: ["gitrepositories"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["kustomize.toolkit.fluxcd.io"]
  resources: ["kustomizations"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["argoproj.io"]
  resources: ["applications"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["tekton.dev"]
  resources: ["pipelines", "pipelineruns", "tasks", "taskruns"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
- apiGroups: ["argoproj.io"]
  resources: ["workflows", "workflowtemplates"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: zerg-operator
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: zerg-operator
subjects:
- kind: ServiceAccount
  name: zerg-operator
  namespace: zerg-system
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: zerg-operator-config
  namespace: zerg-system
data:
  config.yaml: |
    operator:
      default_namespace: "zerg-system"
      reconciliation_interval: 300
      max_concurrent_reconciles: 5
      metrics_enabled: true
      metrics_port: 8080
---
apiVersion: v1
kind: Service
metadata:
  name: zerg-operator-metrics
  namespace: zerg-system
  labels:
    app.kubernetes.io/name: zerg-operator
spec:
  ports:
  - name: metrics
    port: 8080
    targetPort: 8080
  selector:
    app.kubernetes.io/name: zerg-operator